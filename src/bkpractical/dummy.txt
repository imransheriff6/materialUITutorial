import React, { Component } from 'react';
import axios from "axios"
class Content extends Component{
    constructor(props) {
        super(props);
        this.state = { 
            users:[]
        }
      }
    componentDidMount(){
        const CancelToken = axios.CancelToken;
        const source = CancelToken.source();
        axios.get('http://localhost:8001/login',{ cancelToken: source.token })
        .then(response => {
            //console.log(response)
            this.state.users=response.data
        });
        return () => {
            source.cancel();
          };
    }
    handler(){
        axios.post('http://localhost:8001/login',{
            name:document.getElementById('name').value,
            email:document.getElementById('email').value
        })
        .then((res)=>{
            console.log(res)
        },(err)=>{
            console.log(err)
        })
    }
    render(){
        return(
            <div>
                <h1>Back End Tutorial</h1>
                {this.state.users.map((users,i)=>(
                    <div key={i}>
                        <h1>{users.name}</h1>
                        <h1>{users.email}</h1>
                    </div>
                ))}
                <form>
                    <div>
                        <p>Name</p>
                    <input type='text' name='name' id='name'></input>
                    </div>
                    <div>
                        <p>Email</p>
                    <input type='email' name='email' id='email'></input>
                    </div>   
                    <button onClick={this.handler}>Submit</button>
                </form>
                
            </div>
        )
    }
   
}
export default Content







// const initial = {
//     "username":'',
//     "email":''
// }
const reducer = (state,action)=>{
    //console.log(state)
    switch(state.type){
        case 'username':
            return {...state,username:action.value}
        case 'email':
            return {...state,email:action.value}
        default:
            return state
    }
}



switch(event.target.name){
    case 'username':
        if(event.target.value.length<5){
            seterror([{name:'Too short'}])
        }
    case 'email':
        if(match.test(event.target.value)==false){
            seterror([{email:'Invalid Email'}])
        }
    default:
        seterror([{name:'',email:''}]);
  }
  //setvalue([{username:'',email:''}])




  <Dialog fullScreen open={open} onClose={handleClose_modal} TransitionComponent={Transition}>
                        <AppBar className={classes_1.appBar}>
                        <Toolbar>
                            <IconButton edge="start" color="inherit" onClick={handleClose_modal} aria-label="close">
                            <ArrowBackIcon />
                            </IconButton>
                            <Typography variant="h6" className={classes_1.title}>
                            Sound
                            </Typography>
                            <Button autoFocus color="inherit" onClick={handleClose_modal}>
                            save
                            </Button>
                        </Toolbar>
                        </AppBar>
                        <List>
                        <ListItem button>
                            <ListItemText primary="Phone ringtone" secondary="Titania" />
                        </ListItem>
                        <Divider />
                        <ListItem button>
                            <ListItemText primary="Default notification ringtone" secondary="Tethys" />
                        </ListItem>
                        </List>
                    </Dialog>